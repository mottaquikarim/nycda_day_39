{"home":{"content":"# SQL Syntax\n\nWelcome to **Lecture 39**! Here is a brief class breakdown.\n\n## Learning Objectives\n1. Write SQL queries\n\n## To Do Today\n\n### [Warmup](#warmup)\n### [SQL Reference](#sql-reference)\n\n","idx":0},"title":{"content":"SQL Syntax","idx":1},"desc":{"content":"SQL statements till we drop, yo","idx":2},"warmup":{"content":"# Warmup\n\nToday's warmup is the main lesson.\n\nCheck out the **[SQL Reference](#sql-reference)** page for more info on how to perform DB actions needed in the practice below...\n\n## Repo\nPlease download **[this](https://github.com/mottaquikarim/nycda_lecture39_sql_practice)** repo, which you will need to solve the problems defined below.\n\n## Exercise 0\n\nLet's first get our sql table running. Once you have git cloned the repo defined above, start the server and then head over to **http://localhost:4001**.\n\nYou should see an empty console. Feel free to experiment here as needed, just note that it does **not** save your work yet. \n\nFeel free to practice creating and dropping tables here before going on to the next exercise.\n\nGenerally, experiment! How do you create a table? Remove one? Update one?\n\nCheck out **[docs](https://www.tutorialspoint.com/sqlite/sqlite_create_table.htm)** here.\n\n## Exercise 1\n\nLet's get started by initializing our DB. We can do this many ways but a good approach is to define a migration file.\n\n\nCreate a migration file called **`migrations/001-intial-schema.sql`** that creates three tables:\n\n### Company\n\nSchema should be as follows:\n\n* id (int, autoincremented, primary key)\n* name (text, not null)\n* age (int, not null)\n* address (char, limit 50)\n* salary (decimal placed number, not null)\n\n### Department \n\nSchema should be as follows:\n\n* id (int, autoincremented, primary key)\n* name (char, limit 100)\n\n### Employee_Dept\n\nSchema should be as follows:\n\n* employee_id (int, not null)\n* dept_id (int, not null)\n\nOnce you have created this file, run your node project again. If you look at the SQLite UI, you shouldn't see your tables.\n\n...why? Debug this problem and get it working!\n\n## Exercise 2\nAssuming your db is now up and running - let's go ahead and implement a way to fill our DB.\n\nImplement two **/POST** calls that populate our db:\n\n### /POST employee\n\nYour endpoint should take as JSON all the fields the **company** table takes. It should - **in index.js** on your node server - add a new row to your db.\n\n**HINT**: consider the code already in index.js to accomplish this.\n\n### /POST department\nSame as above but for **department** db.\n\nYour routes should return a `{success: true}` or false JSON response.\n\n## Exercise 3\n\nIf you implement the `SocketInst.broadcast('LOAD_BUFFER');` method in your API routes above, the SQLite UI should automatically update with the new data.\n\nUsing the UI, select all the employees that exist in a particular department. How would you accomplish this?\n\nIs it possible to have one employee in multiple depts? Vice versa?\n\n\n## Exercise 4\n\nNow, write an API endpoint that accomplished **Ex3** through node.js\n\n### /GET dept/:dept_id/employees\nGrabs all employee by dept, returns JSON listing employee id, employee name, dept name\n\n### /GET /employee/:id/depts\nSame as above, but grabs all depts an employee is in\n","idx":3},"sql-reference":{"content":"# SQL Reference\n\nSyntax reference for SQL. \n\n**[Documentation](https://www.tutorialspoint.com/sqlite/sqlite_create_table.htm)**\n\n^^ **Great** resource for sql syntax.  \n\n\n\n","idx":4},"__list__":["home","title","desc","warmup","sql-reference"]}